interface Node {
  id: ID!
}

type Query {
  app: App!
  user: User
  node(id: ID!): Node
}

type Mutation {
  parties: PartiesOpts!
}

type App {
  author: String!
  name: String!
  version: String!
}

type User implements Node {
  id: ID!
  name: String!
  picture: String!
}

type Party implements Node {
  id: ID!
  name: String!
  password: String
  code: String!
}

enum MutationStatus {
  ok
  error
}

type UserError {
  fieldName: String
  messages: [String!]
}

interface IMutationPayload {
  status: MutationStatus!
  userErrors: [UserError!]
}

type PartiesOpts {
  createParty(input: CreatePartyInput!): CreatePartyPayload!
}

input CreatePartyInput {
  name: String!
  password: String
}

type CreatePartyPayload implements IMutationPayload {
  status: MutationStatus!
  userErrors: [UserError!]
  node: Party
}
